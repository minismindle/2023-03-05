옵션을 해석하고 처리할 주체?
소켓코드 ->  SQL_SOCKET
IPv4 -> IPPROTO_IP
TCP 프로토콜 -> IPPROTO_TCP

SO_KEEPALIVE - 주기적으로 연결상태 확인 여부 (TCP only)
상대방이 소리소문없이 연결 끊는다면?
주기적으로 TCP 프로토콜 연결 상태 확인 -> 끊어진 연결 감지
bool enable = true;
::setsockopt(serverSocket,SQL_SOCKET,SO_KEEPALIVE,(char*)&enable,sizeof(enable));

SO_LINGER = 지연하다
송신버퍼에 있는 데이터를 보낼것인가 지울것인가?

onoff = 0이면 closesocket()이 바로 리턴 아니면 linger초만큼 대기
linger : 대기시간
LINGER linger;
linger.I_onoff = 1;
linger.I_linger = 5;
::setsockopt(serverSocket,SQL_SOCKET,SO_LINGER,(char*)&linger,sizeof(linger));

Half-Close
SD_SEND : send 막는다
SD_RECEIVE : recv 막는다
SD_BOTH : 둘 다 막는다
shutdown(serverSocket,SD_SEND);

SO_SNDBUF = 송시버퍼크기
SO_RCVBUF = 수시버퍼크기
int32 recvBufferSize;
optionLen = sizeof(recvBufferSize);
::getsockopt(serverSocket,SQL_SOCKET,SO_SNDBUF,(char*)&recvBufferSize,&optionLen);


SO_REUSEADDR
// IP주소 및 PORT 재사용
{
  bool enable = true;
  ::setsockopt(serverSocket,SQL_SOCKET,SO_REUSEADDR,(char*)&enable,sizeof(enable));
}

IPPROTO_TCP
TCP_NODELAY = Nagle 네이글 알고리즘 작동 여부
데이터가 충분히 크면 보내고 그렇지 않으면 데이터가 충분히 쌓일때까지 대기
장점 : 작은 패킷이 불필요하게 많이 생성되는 일을 방지
단점 : 반응 시간 손해
{
  bool enable = true;
  ::setsockopt(serverSocket,IPPROTO_TCP,TCP_NODELAY,(char*)&enable,sizeof(enable));
}
